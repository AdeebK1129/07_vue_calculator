2/29: Adeeb: I worked on initlizing all necessary files 

3/1: Adeeb: I created modified the stylistic portion of our calculator using CSS. I began experimenting with CSS Grid and Flexbox

3/4: Adeeb: I was able to create a design of buttons for our calculator but still struggled with deciding whether or not to use Flexbox or grid. At this point I was using flexbox but the formatting wasn't even. 

3/5: Adeeb: I decided to use CSS Grid and used the template column areas feature to map out our entire button and input layout for the calculator

3/6: Adeeb: Changed input area from an edittable div to a text area as edittable divs aren't compatible with v-models. Successfully imported mathjs and began adding v-on bindings to buttons. 

3/7: Adeeb: Added watcher that checks for valid input; added computed property that converts special characters into computable string during evaluation; added undo and redo functionality through the implementation of redo and undo stacks that store evaluated expressions; added clear button and replaced percent button (seldom used by anyone), One interesting issue was the delete button which wouldnt work on recently calculated values. This was because math.evaluate immediately returns a int and delete uses a slice method intended for strings. As such, a toString method was added to math.evaluate. 
Added styles to buttons and calculator designs. One very fun challenge was learning how to use regular expressions (regex) in js. Regular expressions are used in instances where a certain character is searched for and to make direct matches. regex was used in both my watcher and computed property. 
Some helpful resources were:
https://developer.mozilla.org/en-US/docs/Web/JavaScript/Guide/Regular_expressions 
https://www.w3schools.com/jsref/jsref_obj_regexp.asp 
https://www.w3schools.com/jsref/jsref_regexp_g.asp

3/8: Adeeb: I worked on the logic for the more advanced undo feature you mentioned in class. I had to create distinctions between manually entered direct inputs and button entered inputs. The isDirectInput boolean helped a lot with this as it allowed me to add to our watcher method which would then determine that, if an inputted digit was valid, it would be added to the undo stack accordingly.  I also implemented the enter button feature which strangely was one of the hardest parts of this. Initially if a user presses a button and then immediately presses enter, the last pressed digit just repeated itself. This was becuase the user had to click back onto the text area. As such, I learned how to use refs to ensure that the user would focus on the text area, forcing enter to be entered in the area. One of the funner aspects of this was creating the equation history feature which allowed me to experiment with JS objects and learn about the shortcut method unshift which, adds an element to the beginning of the array while also returning the length. This is useful because the length of the array is needed in order to know if we have reached our maximum of 3 equations displayed on history or not. 
Visualizing a stack also helped in making more clear the logic behind our undo and redo methods. 

More helpful resources: 
https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/unshift
https://www.cs.usfca.edu/~galles/visualization/StackArray.html
https://stackoverflow.com/questions/42695728/vue-how-to-call-focus-on-button-click 

